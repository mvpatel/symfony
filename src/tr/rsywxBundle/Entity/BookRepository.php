<?php

namespace tr\rsywxBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * BookRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BookRepository extends EntityRepository {

    public function getBookSummary() {
        $em = $this->getEntityManager();
        $q = $em->createQuery('select count(b.id) bc, sum(b.kword) wc, sum(b.page) pc from trrsywxBundle:BookBook b');
        $tmp1 = $q->getSingleResult();

        $repo = $em->getRepository('trrsywxBundle:BookBook');
        $q = $repo->createQueryBuilder('q')
                ->orderBy('q.purchdate', 'desc')
                ->setMaxResults(1)
                ->getQuery();

        $tmp2 = $q->getSingleResult();

        $res = array();
        $res['summary'] = $tmp1;
        $res['last'] = $tmp2;

        return $res;
    }

    public function getDouban($isbn) {
        $ret = $this->createDummyReturn();

        $res = $this->getDoubanRemote($isbn);
        if ($res) { // The above call successful
            if (array_key_exists('summary', $res))
                $summary = $res['summary']['$t'];
            else
                $summary = '（豆瓣还没有简介）';

            $ret['summary'] = $summary;
            $ret['alternate'] = $res['link'][1]['@href'];

            if (array_key_exists('db:tag', $res))
                $tags = $res['db:tag'];
            else
                $tags[] = '豆瓣没有给出任何TAG';

            $ret['tags'] = array(); //Clear up the dummy tag 'not found';
            foreach ($tags as $t) {
                $ret['tags'][] = $t['@name'];
            }

            $rating = $res['gd:rating']['@average'];
            if ($rating == 0)
                $rating = '（还没有评分）';
            $ret['rating'] = $rating;
        }
        return $ret;
    }

    private function getDoubanRemote($isbn) {
        $bad_isbn = 'bad isbn';

        //if (strpos($isbn, '.')) //Old style isbn
        //    str_replace('.', '-', $isbn);


        $url = "http://api.douban.com/book/subject/isbn/$isbn?alt=json";

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

        //$s->user = 'taylor.ren@gmail.com';
        //$s->pass = 'tr0210';

        $res = curl_exec($ch);
        if ($res == $bad_isbn) // My isbn is not found in douban 
            return false;
        else
            return json_decode($res, true);
    }

    private function createDummyReturn() {
        $str = '（豆瓣找不到）';
        $dummy = array();

        $dummy['summary'] = $str;
        $dummy['alternate'] = $str;
        $dummy['tags'][] = $str;
        $dummy['rating'] = $str;

        return $dummy;
    }
    
    public function getLastVisit($bid)
    {
        $em = $this->getEntityManager();
        $q = $em->createQuery('select v.visitwhen from trrsywxBundle:BookVisit v where v.bid=:bid order by v.visitwhen desc');
        $q->setParameter('bid', $bid);
        $res = $q->getResult();
        $when = date('Y年m月d日H时i分s秒');

        if (isset($res[0]['visitwhen']))
            $when = date('Y年m月d日H时i分s秒', $res[0]['visitwhen']);

        return $when;
    }

    public function getVisitCount($bid, $count)
    {
        $em = $this->getEntityManager();
        $q = $em->createQuery('select count(v.bid) vc from trrsywxBundle:BookVisit v where v.bid=:bid');
        $q->setParameter('bid', $bid);
        $res = $q->getSingleResult();

        $vc = $res['vc'];
        if ($vc == 0) // Most likely that book has never been visited before
        {
            $vc = 1;
        }
        else
        {
            $vc = $vc + $count;
        }
        if ($count != 0)
        {
            $rec = new \tr\rsywxBundle\Entity\BookVisit();
            $rec->setBid($bid);
            $visitwhen = new \DateTime();
            $rec->setVisitwhen($visitwhen->getTimeStamp());
            $em->persist($rec);
            $em->flush();
        }
        return $vc;
    }
    
    public function getTagsByBookId($id)
    {
        $repo = $this->getEntityManager()->getRepository('trrsywxBundle:BookTaglist');
        $q = $repo->createQueryBuilder('t')
                ->where('t.bookid =:id')
                ->setParameter('id', $id)
                ->orderBy('t.tag', 'asc')
                ->getQuery();

        return $q->getResult();
    }
    
    public function getResultAndCount($page, $rpp, $key=null)
    {
                // Get the book count
        $em = $this->getEntityManager();
        if ($key == 'null')
        {
            $q1 = $em->createQuery('select count(b.id) bc from trrsywxBundle:BookBook b');
        }
        else
        {
            $qstr = sprintf("select count(b.id) bc from trrsywxBundle:BookBook b where b.title like '%s%%'", $key);
            $q1 = $em->createQuery($qstr);
        }
        $res1 = $q1->getSingleResult();
        $count = $res1['bc'];

        // Now get the wanted result specified by page

        $repo = $em->getRepository('trrsywxBundle:BookBook');
        $q2 = $repo->createQueryBuilder('r')
                ->setMaxResults($rpp)
                ->setFirstResult(($page - 1) * $rpp)
                ->orderBy('r.id', 'desc');
        if ($key <> 'null')
        {
            $key = $key . '%';
            $q2->where('r.title like :key')
                    ->setParameter('key', $key);
        }

        $q2 = $q2->getQuery();


        $res2 = $q2->getResult();

        return array($res2, $count);
    
    }

}
